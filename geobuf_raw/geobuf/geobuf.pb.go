// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geobuf.proto

/*
	Package geobuf is a generated protocol buffer package.

	It is generated from these files:
		geobuf.proto

	It has these top-level messages:
		Value
		Feature
		FeatureCollection
*/
package geobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// GeomType is described in section 4.3.4 of the specification
type GeomType int32

const (
	GeomType_UNKNOWN         GeomType = 0
	GeomType_POINT           GeomType = 1
	GeomType_LINESTRING      GeomType = 2
	GeomType_POLYGON         GeomType = 3
	GeomType_MULTIPOINT      GeomType = 4
	GeomType_MULTILINESTRING GeomType = 5
	GeomType_MULTIPOLYGON    GeomType = 6
)

var GeomType_name = map[int32]string{
	0: "UNKNOWN",
	1: "POINT",
	2: "LINESTRING",
	3: "POLYGON",
	4: "MULTIPOINT",
	5: "MULTILINESTRING",
	6: "MULTIPOLYGON",
}
var GeomType_value = map[string]int32{
	"UNKNOWN":         0,
	"POINT":           1,
	"LINESTRING":      2,
	"POLYGON":         3,
	"MULTIPOINT":      4,
	"MULTILINESTRING": 5,
	"MULTIPOLYGON":    6,
}

func (x GeomType) String() string {
	return proto.EnumName(GeomType_name, int32(x))
}
func (GeomType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGeobuf, []int{0} }

// Variant type encoding
// The use of values is described in section 4.1 of the specification
type Value struct {
	// Exactly one of these values must be present in a valid message
	StringValue string  `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	FloatValue  float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	IntValue    int64   `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	UintValue   uint64  `protobuf:"varint,5,opt,name=uint_value,json=uintValue,proto3" json:"uint_value,omitempty"`
	SintValue   int64   `protobuf:"zigzag64,6,opt,name=sint_value,json=sintValue,proto3" json:"sint_value,omitempty"`
	BoolValue   bool    `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorGeobuf, []int{0} }

func (m *Value) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *Value) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Value) GetIntValue() int64 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *Value) GetUintValue() uint64 {
	if m != nil {
		return m.UintValue
	}
	return 0
}

func (m *Value) GetSintValue() int64 {
	if m != nil {
		return m.SintValue
	}
	return 0
}

func (m *Value) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

type Feature struct {
	Id          uint64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Properties  map[string]*Value `protobuf:"bytes,2,rep,name=Properties" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Type        GeomType          `protobuf:"varint,3,opt,name=type,proto3,enum=GeomType" json:"type,omitempty"`
	Geometry    []uint64          `protobuf:"varint,4,rep,packed,name=Geometry" json:"Geometry,omitempty"`
	BoundingBox []int64           `protobuf:"varint,5,rep,packed,name=BoundingBox" json:"BoundingBox,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptorGeobuf, []int{1} }

func (m *Feature) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Feature) GetProperties() map[string]*Value {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Feature) GetType() GeomType {
	if m != nil {
		return m.Type
	}
	return GeomType_UNKNOWN
}

func (m *Feature) GetGeometry() []uint64 {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *Feature) GetBoundingBox() []int64 {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

type FeatureCollection struct {
	Features []*Feature `protobuf:"bytes,1,rep,name=Features" json:"Features,omitempty"`
}

func (m *FeatureCollection) Reset()                    { *m = FeatureCollection{} }
func (m *FeatureCollection) String() string            { return proto.CompactTextString(m) }
func (*FeatureCollection) ProtoMessage()               {}
func (*FeatureCollection) Descriptor() ([]byte, []int) { return fileDescriptorGeobuf, []int{2} }

func (m *FeatureCollection) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func init() {
	proto.RegisterType((*Value)(nil), "Value")
	proto.RegisterType((*Feature)(nil), "Feature")
	proto.RegisterType((*FeatureCollection)(nil), "FeatureCollection")
	proto.RegisterEnum("GeomType", GeomType_name, GeomType_value)
}
func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StringValue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(len(m.StringValue)))
		i += copy(dAtA[i:], m.StringValue)
	}
	if m.FloatValue != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
		i += 4
	}
	if m.DoubleValue != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
		i += 8
	}
	if m.IntValue != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(m.IntValue))
	}
	if m.UintValue != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(m.UintValue))
	}
	if m.SintValue != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64((uint64(m.SintValue)<<1)^uint64((m.SintValue>>63))))
	}
	if m.BoolValue {
		dAtA[i] = 0x38
		i++
		if m.BoolValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(m.Id))
	}
	if len(m.Properties) > 0 {
		for k, _ := range m.Properties {
			dAtA[i] = 0x12
			i++
			v := m.Properties[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGeobuf(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGeobuf(uint64(len(k))) + msgSize
			i = encodeVarintGeobuf(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGeobuf(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGeobuf(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(m.Type))
	}
	if len(m.Geometry) > 0 {
		dAtA3 := make([]byte, len(m.Geometry)*10)
		var j2 int
		for _, num := range m.Geometry {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.BoundingBox) > 0 {
		dAtA5 := make([]byte, len(m.BoundingBox)*10)
		var j4 int
		for _, num1 := range m.BoundingBox {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGeobuf(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *FeatureCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGeobuf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintGeobuf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Value) Size() (n int) {
	var l int
	_ = l
	l = len(m.StringValue)
	if l > 0 {
		n += 1 + l + sovGeobuf(uint64(l))
	}
	if m.FloatValue != 0 {
		n += 5
	}
	if m.DoubleValue != 0 {
		n += 9
	}
	if m.IntValue != 0 {
		n += 1 + sovGeobuf(uint64(m.IntValue))
	}
	if m.UintValue != 0 {
		n += 1 + sovGeobuf(uint64(m.UintValue))
	}
	if m.SintValue != 0 {
		n += 1 + sozGeobuf(uint64(m.SintValue))
	}
	if m.BoolValue {
		n += 2
	}
	return n
}

func (m *Feature) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGeobuf(uint64(m.Id))
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGeobuf(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGeobuf(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGeobuf(uint64(mapEntrySize))
		}
	}
	if m.Type != 0 {
		n += 1 + sovGeobuf(uint64(m.Type))
	}
	if len(m.Geometry) > 0 {
		l = 0
		for _, e := range m.Geometry {
			l += sovGeobuf(uint64(e))
		}
		n += 1 + sovGeobuf(uint64(l)) + l
	}
	if len(m.BoundingBox) > 0 {
		l = 0
		for _, e := range m.BoundingBox {
			l += sovGeobuf(uint64(e))
		}
		n += 1 + sovGeobuf(uint64(l)) + l
	}
	return n
}

func (m *FeatureCollection) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovGeobuf(uint64(l))
		}
	}
	return n
}

func sovGeobuf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGeobuf(x uint64) (n int) {
	return sovGeobuf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeobuf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FloatValue = float32(math.Float32frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleValue = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntValue", wireType)
			}
			m.IntValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UintValue", wireType)
			}
			m.UintValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UintValue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SintValue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.SintValue = int64(v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolValue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGeobuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeobuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGeobuf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGeobuf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGeobuf
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGeobuf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGeobuf
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGeobuf
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGeobuf(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGeobuf
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GeomType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGeobuf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Geometry = append(m.Geometry, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGeobuf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGeobuf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGeobuf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Geometry = append(m.Geometry, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Geometry", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGeobuf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoundingBox = append(m.BoundingBox, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGeobuf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGeobuf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGeobuf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoundingBox = append(m.BoundingBox, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundingBox", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeobuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeobuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeobuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeobuf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeobuf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGeobuf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeobuf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeobuf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeobuf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeobuf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("geobuf.proto", fileDescriptorGeobuf) }

var fileDescriptorGeobuf = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xbb, 0x8e, 0xd3, 0x40,
	0x14, 0x86, 0xf7, 0xf8, 0x92, 0xd8, 0xc7, 0x51, 0xd6, 0x0c, 0x8d, 0x05, 0xac, 0x19, 0xa2, 0x2d,
	0x46, 0x14, 0x2e, 0x42, 0xb3, 0x50, 0x06, 0x85, 0xc8, 0x22, 0x38, 0xd1, 0x90, 0x05, 0x51, 0xa1,
	0x84, 0xcc, 0x46, 0x16, 0xc6, 0x13, 0xf9, 0xb2, 0xc2, 0x6f, 0xc1, 0x63, 0x51, 0xf2, 0x08, 0x28,
	0x34, 0xbc, 0x05, 0xc8, 0xf6, 0x6c, 0x62, 0x6d, 0xe7, 0xf9, 0xfe, 0xef, 0x8c, 0xfc, 0xeb, 0x0c,
	0x0e, 0x76, 0x42, 0x6e, 0xca, 0x9b, 0x60, 0x9f, 0xc9, 0x42, 0x8e, 0xfe, 0x02, 0x9a, 0x1f, 0xd6,
	0x49, 0x29, 0xc8, 0x33, 0x1c, 0xe4, 0x45, 0x16, 0xa7, 0xbb, 0xcf, 0xb7, 0xf5, 0xd9, 0x03, 0x0a,
	0xcc, 0xe6, 0x4e, 0xcb, 0x5a, 0xe5, 0x29, 0x3a, 0x37, 0x89, 0x5c, 0x17, 0xca, 0xd0, 0x28, 0x30,
	0x8d, 0x63, 0x83, 0x8e, 0x77, 0x6c, 0x65, 0xb9, 0x49, 0x84, 0x32, 0x74, 0x0a, 0x0c, 0xb8, 0xd3,
	0xb2, 0x56, 0x79, 0x8c, 0x76, 0x9c, 0xde, 0xdd, 0x60, 0x50, 0x60, 0x3a, 0xb7, 0xe2, 0x54, 0xcd,
	0x5f, 0x20, 0x96, 0xa7, 0xd4, 0xa4, 0xc0, 0x0c, 0x6e, 0x97, 0xdd, 0x38, 0x3f, 0xc5, 0x3d, 0x0a,
	0x8c, 0x70, 0x3b, 0xef, 0xc6, 0x1b, 0x29, 0x13, 0x15, 0xf7, 0x29, 0x30, 0x8b, 0xdb, 0x35, 0x69,
	0xe2, 0xd1, 0x3f, 0xc0, 0xfe, 0x1b, 0xb1, 0x2e, 0xca, 0x4c, 0x90, 0x21, 0x6a, 0xe1, 0xb6, 0xa9,
	0x68, 0x70, 0x2d, 0xdc, 0x92, 0x2b, 0xc4, 0x65, 0x26, 0xf7, 0x22, 0x2b, 0x62, 0x91, 0x7b, 0x1a,
	0xd5, 0x99, 0x33, 0xf6, 0x02, 0x65, 0x07, 0xa7, 0x68, 0x9a, 0x16, 0x59, 0xc5, 0x3b, 0x2e, 0xb9,
	0x40, 0xa3, 0xa8, 0xf6, 0x6d, 0xd5, 0xe1, 0xd8, 0x0e, 0x66, 0x42, 0x7e, 0x5b, 0x55, 0x7b, 0xc1,
	0x1b, 0x4c, 0x7c, 0xb4, 0x6a, 0x22, 0x8a, 0xac, 0xf2, 0x0c, 0xaa, 0x33, 0x63, 0xa2, 0xb9, 0xc0,
	0x8f, 0x8c, 0x5c, 0xa2, 0x33, 0x91, 0x65, 0xba, 0x8d, 0xd3, 0xdd, 0x44, 0x7e, 0xf7, 0x4c, 0xaa,
	0x33, 0xbd, 0x51, 0xba, 0xf8, 0xd1, 0x14, 0xcf, 0xef, 0xfd, 0x03, 0x71, 0x51, 0xff, 0x2a, 0x2a,
	0xb5, 0xa5, 0xfa, 0x93, 0x3c, 0x41, 0xf3, 0xb4, 0x17, 0x67, 0xdc, 0x0b, 0x9a, 0xda, 0xbc, 0x85,
	0xaf, 0xb4, 0x2b, 0x18, 0xbd, 0xc4, 0x07, 0xaa, 0xd2, 0x6b, 0x99, 0x24, 0xe2, 0x4b, 0x11, 0xcb,
	0x94, 0x5c, 0xa2, 0xa5, 0x60, 0xee, 0x41, 0x53, 0xdc, 0xba, 0x2b, 0xce, 0x8f, 0xc9, 0xf3, 0xdb,
	0xb6, 0x47, 0xdd, 0x8c, 0x38, 0xd8, 0xbf, 0x8e, 0xde, 0x46, 0x8b, 0x8f, 0x91, 0x7b, 0x46, 0x6c,
	0x34, 0x97, 0x8b, 0x30, 0x5a, 0xb9, 0x40, 0x86, 0x88, 0xf3, 0x30, 0x9a, 0xbe, 0x5f, 0xf1, 0x30,
	0x9a, 0xb9, 0x5a, 0xed, 0x2d, 0x17, 0xf3, 0x4f, 0xb3, 0x45, 0xe4, 0xea, 0x75, 0xf8, 0xee, 0x7a,
	0xbe, 0x0a, 0x5b, 0xd9, 0x20, 0x0f, 0xf1, 0xbc, 0x39, 0x77, 0x26, 0x4c, 0xe2, 0xe2, 0x40, 0x49,
	0xed, 0x58, 0x6f, 0xe2, 0xfe, 0x3c, 0xf8, 0xf0, 0xeb, 0xe0, 0xc3, 0xef, 0x83, 0x0f, 0x3f, 0xfe,
	0xf8, 0x67, 0x9b, 0x5e, 0xf3, 0x70, 0x5f, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x4d, 0xe8,
	0xb2, 0xc8, 0x02, 0x00, 0x00,
}
